% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ruf.R
\name{ruf}
\alias{ruf}
\title{Generate a resource use function}
\usage{
ruf(x, R, C)
}
\arguments{
\item{x}{A site by species matrix}

\item{R}{A resource state matrix}

\item{C}{A \code{\link[=metacommunity]{metacommunity()}}}
}
\value{
A matrix of the same dimensions as \code{R} giving the rate of change of each resource
}
\description{
Generate a resource use function
}
\details{
Resource use functions describe the impact a species has on the state of a location. This impact will commonly
be zero (for static habitat features, for example), but for many resources (e.g., nutrient concentrations)
the result will be negative (i.e., species deplete resources).

This function is intended as an example, and can be replaced with a user-defined function. The function must take
a site by species matrix and a resource state matrix as its first two arguments, and it must return a matrix
with the same dimensions as R giving the instantaneous rate of change in each resource. The units must match
whatever is being used for the reaction-transport portion of the model; often something like
$g-Resource L^{-1} min^{-1}$.

The default behaviour is for species to consume more resources the closer they are to the niche optimum. This is done
by computing the value of the niche at the current concentration (\code{sp$col(R) - sp$ext(R)}) and taking the ratio with
the \code{niche_max} attribute (note that for linear niches, this value can exceed one if resource concentrations grow
beyond the original definition). This ratio is then multiplied by the \code{r_scale} to get the rate of change. This
leads to a convenient definition of the scale, which is the number of units of resources depleted by a species at its
maximum growth, per unit time.
}
\examples{
comm = metacommunity()
Q = rep(1, 4)
adj = matrix(0, nrow = 4, ncol = 4)
adj[1,2] = adj[2,3] = adj[4,3] = 1
rn = river_network(adj, Q)
site_by_species(rn) = random_community(rn, comm)
ruf(site_by_species(rn), state(rn), r_scale(comm))
}
